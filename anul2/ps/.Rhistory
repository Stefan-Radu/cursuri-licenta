.libPaths()
mypaths <- .libPaths()
mypaths <- c(mypaths, '~/personal/facultate/ps/R')
.libPaths(mypaths)
.libPaths(mypaths)
.libPaths(mypaths)
.libPaths()
mypaths <- c(mypaths, '/home/stef/personal/facultate/ps/R')
.libPaths(mypaths)
.libPaths()
c
mypaths <- c(mypaths, '/home/stef/personal/facultate/ps/R')
.libPaths()
.libPaths(mypaths)
.libPaths()
mypaths <- c(mypaths, '/home/stef/personal/facultate/ps/R')
mypaths
.libPaths(mypaths)
.libPaths
.libPaths()
.libPaths()
assign(".lib.loc", "~/personal/facultate/ps/R", envir = environment(.libPaths))
assign(".lib.loc", "/home/stef/personal/facultate/ps/R", envir = environment(.libPaths))
mypaths <- .libPaths()
mypaths <- c(mypaths, '~/personal/facultate/ps/R')
.libPaths(mypaths)
.libPaths
.libPaths()
install.packages("prob")
probabilitate;
probabilitate <- favorabile / totale;
omega_zar7 <- rolldie(7);
install.packages("roll")
probabilitate
remove.packages("roll", lib="~/personal/facultate/ps/R")
o <- cards()
install.packages("prob")
install.packages("prob")
install.packages("prob", dependencies = FALSE)
install.packages("prob", dependencies = FALSE)
library(discreteRV)
library(prob)
pi
beta(1, 0)
beta(0.5, 0)
beta(0.5, 0)
beta(0.2, 0)
beta(0.2, 0.8)
beta(0.2)
beta(0.2, 4)
# 1
(X <- RV(c(2, 3), c(1/5, 4/5)))
3 * X
X ** -1
cos(pi * X / 2)
(Y <- RV(c(-3, -2), c(4/5, 1/5)))
Y ** 2
Y + 3
X-1
(X <- RV(c(0, 9), c(1/2, 1/2)))
X-1
(Y <- RV(c(-3, 1), c(1/7, 6/7)))
X-1
X ** -2
X ** (-2)
X - 1
X ** (-2)
X ** (-2)
(X <- RV(c(0, 9), c(1/2, 1/2)))
X ** (-2)
1/X
(1/X) ** 2
X ** 2
1 / (X ** 2)
sin(pi*X/4)
5 * Y
e
5*Y
e
exp(1)
exp(1) ** Y
exp(1) ** Y
exp(1) ** Y
exp(1) ** Y
exp(Y)
2 * X + 3 * Y
# 2
(X <- RV(c(2, 3), c(1/5, 4/5)))
(Y <- RV(c(-3, -2), c(4/5, 1/5)))
2 * X + 3 * Y
3 * X - Y
X ** 2 * Y ** 3
(X ** 2) * (Y ** 3)
expand.grid((X ** 2), (Y ** 3))
(Y <- RV(c(-3, -2), c(4/5, 1/5)))
2 * X + 3 * Y
2 * X + 3 * Y
2 * X + 3 * Y
(X ** 2) %*% (Y ** 3)
X ** 2 %*% Y ** 3
X ** 2 * Y ** 3
(X ** 2 * Y ** 3)
if (n > 1) return ((n - 1) * gama(n - 1))
gama <- function(n) {
if (n == floor(n)) return(factorial(n - 1))
if (n == .5) return(sqrt(pi))
if (n > 1) return ((n - 1) * gama(n - 1))
return(integrate(fgama, 0, Inf, a = n)$value)
}
return (gama(a) * gama(b) / gama(a + b));
(X ** 2 * Y ** 3)[0]
(X ** 2 * Y ** 3)[0]
(X ** 2 * Y ** 3)[:1]
(X ** 2 * Y ** 3)[1:1]
(X ** 2 * Y ** 3)[1:]
(X ** 2 * Y ** 3)[1:4]
for i in .. (X ** 2 * Y ** 3)[1:4]
for (c in .. (X ** 2 * Y ** 3)[1:4])
i
for (i in .. (X ** 2 * Y ** 3)[1:4]) {
i
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
i
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
i
}
print(i)
for (i in (X ** 2 * Y ** 3) {
)[1:4]
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(i)
}
print(i[0])
print(i[1])
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(i[1])
}
print(type(i[1]))
print(typeof(i[1]))
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(typeof(i[1]))
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(typeof(i))
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(typeof(i))
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(typeof(i))
print(i)
}
print(strsplit(i, ",")[1] * strsplit(i, ",")[2])
print(as.numberic(strsplit(i, ",")[2])
}
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(as.numeric(strsplit(i, ",")[1]))
print(as.numberic(strsplit(i, ",")[2]))
}
strcplit(i, ",")
for (i in (X ** 2 * Y ** 3)[1:4]) {
strcplit(i, ",")
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numberic(strsplit(i, ",")[2]))
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
strsplit(i, ",")
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numberic(strsplit(i, ",")[2]))
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
strsplit(i, ",")
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numberic(strsplit(i, ",")[2]))
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(strsplit(i, ","))
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numberic(strsplit(i, ",")[2]))
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(strsplit(i, ",")[1])
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numberic(strsplit(i, ",")[2]))
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(strsplit(i, ",")[1])
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numberic(strsplit(i, ",")[2]))
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
print(unlist(strsplit(i, ","))[1])
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numberic(strsplit(i, ",")[2]))
}
print(as.numeric(li[1]), as.numeric(li[2]))
li <- unlist(strsplit(i, ","))
for (i in (X ** 2 * Y ** 3)[1:4]) {
li <- unlist(strsplit(i, ","))
print(as.numeric(li[1]), as.numeric(li[2]))
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numberic(strsplit(i, ",")[2]))
}
print(as.numeric(li[1]))
for (i in (X ** 2 * Y ** 3)[1:4]) {
li <- unlist(strsplit(i, ","))
print(as.numeric(li[1]))
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numberic(strsplit(i, ",")[2]))
}
for (i in (X ** 2 * Y ** 3)[1:4]) {
li <- unlist(strsplit(i, ","))
print(as.numeric(li[1]) * as.numeric(li[2]))
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numberic(strsplit(i, ",")[2]))
}
3 * X - Y
ret <- (X ** 2 * Y ** 3)
ret <- (X ** 2 * Y ** 3)
ret
typeof(ret)
typeof(ret)
ret <- (X ^ 2 * Y ^ 3)
ret <- (X ^ 2 * Y ^ 3)
ret
ret[[1]]
ret[[2]]
ret[[2][1]]
ret[[5]]
ret[[2]]
ret
ret[[probs]]
ret[[Probs]]
ret[1]
ret[2]
ret
ret[5]
ret[1][1]
for (i in ret[1:4]) {
li <- unlist(strsplit(i, ","))
print(as.numeric(li[1]) * as.numeric(li[2]))
#print(as.numeric(strsplit(i, ",")[1]))
#print(as.numeric(strsplit(i, ",")[2]))
}
for (i in ret[1:4]) {
li <- unlist(strsplit(i, ","))
print(as.numeric(li[1]) * as.numeric(li[2]))
}
(Y <- RV(c(-3, 1), c(1/7, 6/7)))
X - Y
cos(pi * x * y)
cos(pi * X * Y)
X ** 2 + 3 * Y
plot(x)
plot(X)
plot(Y)
plot(Y)
(Y <- RV(c(-3, 1), c(1/7, 6/7)))
plot(Y)
plot(Y)
plot(X)
plot(3 * X)
plot(X ^ -1)
plot(cos(pi / 2 * X))
plot(Y ^ 2)
plot(Y + 3)
plot(X - 1)
plot(1 / X ^ 2)
plot(sin(pi / 4 * X))
plot(5 * Y)
plot(exp(Y))
plot(exp(Y))
